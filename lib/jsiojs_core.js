"use strict";

var colors = require('colors');
var FS = require("q-io/fs");
var Q = require("q");

var exports = module.exports = {};
  
exports.createFile =  (filename) =>
    Q()
      .then(() => checkJsFile(filename))
      .then(() => checkFileNotExist(filename))
      .then(() => FS.write(filename, '// Generated by JsIo.js\n'));
  
exports.deleteFile = (filename) =>
    Q()
      .then(() => checkJsFile(filename))
      .then(() => checkFileExist(filename))
      .then(() => FS.remove(filename));
  
exports.renameFile =  (oldname, newname) =>
    Q()
      .then(() => checkJsFile(oldname))
      .then(() => checkJsFile(newname))
      .then(() => checkFileExist(oldname))
      .then(() => checkFileNotExist(newname))
      .then(() => FS.rename(oldname, newname));

exports.copyFile =  (source, destination) =>
    Q()
      .then(() => checkJsFile(source))
      .then(() => checkJsFile(destination))
      .then(() => checkFileExist(source))
      .then(() => checkFileNotExist(destination))
      .then(() => FS.copy(source, destination));
  
exports.showFile =  (filename) =>
    Q()
      .then(() => checkJsFile(filename))
      .then(() => checkFileExist(filename))
      .then(() => FS.read(filename, "r"));
  
function checkJsFile(filename){
  var deferred = Q.defer();  
  if(filename === undefined) {
    deferred.reject("filename is missing");
  } else if(filename.length < 4 || filename.substring(filename.length-3) !== ".js"){
    deferred.reject(`'${filename}' is not a valid javascript filename`);
  } else {
    deferred.resolve();
  }
  return deferred.promise;
}

function checkFileExist(filename){
  var deferred = Q.defer();
  FS.exists(filename).then((result) => {
    if(result){
      deferred.resolve();
    } else {
      deferred.reject(`'${filename}' does not exist`);
    }
  });
  return deferred.promise;  
}

function checkFileNotExist(filename){
  var deferred = Q.defer();
  FS.exists(filename).then((result) => {
    if(result){
      deferred.reject(`'${filename}' already exists`);
    } else {
      deferred.resolve();
    }
  });
  return deferred.promise;
}